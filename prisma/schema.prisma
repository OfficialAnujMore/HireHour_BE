datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // output   = "./node_modules/@prisma/client"
}

model User {
  id                String     @id @default(uuid())
  firstName         String
  lastName          String
  email             String     @unique
  username          String     @unique
  phoneNumber       String
  password          String
  isServiceProvider Boolean    @default(false)
  avatarUri         String?
  token             String?
  refreshToken      String?
  lastLogin         DateTime   @default(now())
  deletedAt         DateTime?
  isDisabled        Boolean    @default(false)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  Services          Services[]
  userPreference    String[]
  TimeSlot          TimeSlot[]
  Schedule          Schedule[]

  @@index(fields: [id, email, username])
}

model Services {
  id             String           @id @default(uuid())
  title          String
  description    String
  servicePreview ServicePreview[]
  schedule       Schedule[]
  chargesPerHour String
  category       String
  ratings        String           @default("5.0")
  user           User             @relation(fields: [userId], references: [id])
  userId         String
  deletedAt      DateTime?
  isDisabled     Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model ServicePreview {
  id         String    @id @default(uuid())
  imageUri   String
  services   Services? @relation(fields: [servicesId], references: [id])
  servicesId String?
}

model Schedule {
  id           String    @id @default(uuid())
  // day        String
  // month      String
  // fullDate   DateTime
  date         String
  isAvailable  Boolean
  // timeSlots  TimeSlot[]
  Services     Services? @relation(fields: [servicesId], references: [id])
  servicesId   String?
  bookedUser   User?     @relation(fields: [bookedUserId], references: [id])
  bookedUserId String?
}

model TimeSlot {
  id           String  @id @default(uuid())
  time         String
  available    Boolean
  bookedUser   User?   @relation(fields: [bookedUserId], references: [id])
  bookedUserId String? // Nullable to allow unbooked slots
  // schedule     Schedule @relation(fields: [scheduleId], references: [id])
  scheduleId   String
}

model OTP {
  id          String   @id @default(uuid())
  otp         String
  key         String
  field       String
  type        String
  expireAfter DateTime
}

enum Role {
  CUSTOMER
  SERVICE_PROVIDER
}
